generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPERADMIN
  ADMIN
  USER
}

model User {
  id      String   @id @default(uuid())
  clerkId String   @unique
  role    UserRole @default(USER)

  archived  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  attempts PuzzleAttempt[]
}

model Puzzle {
  id       String   @id @default(uuid())
  question String
  answer   String
  hints    String[]
  // category  String (Let's make an enum for this when we implement)
  // difficulty String (Let's make an enum for this when we implement)

  displayDate  DateTime?
  displayOrder Int?      @unique
  published    Boolean   @default(false)
  archived     Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  attempts PuzzleAttempt[]
}

model PuzzleAttempt {
  id               String   @id @default(uuid())
  puzzleId         String
  puzzle           Puzzle   @relation(fields: [puzzleId], references: [id], onDelete: Cascade)
  
  // For authenticated users
  userId           String?
  user             User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // For anonymous users (hash of IP + User-Agent + puzzle ID + daily salt)
  userFingerprint  String?
  
  submittedAnswer  String
  isCorrect        Boolean
  ipAddress        String?
  userAgent        String?
  createdAt        DateTime @default(now())

  @@index([puzzleId, userFingerprint, createdAt])
  @@index([puzzleId, userId, createdAt])
  @@index([puzzleId, createdAt])
}
